  generator client {
    provider = "prisma-client-js"
    seed    = "./seed.js"
  }

  datasource db {
    provider = "sqlserver"
    url               = "sqlserver://cuongdz.database.windows.net:1433;database=Learn;user=cuongdz@cuongdz;password=CuongDepTrai@123;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;"
    shadowDatabaseUrl = "sqlserver://ducdd.database.windows.net:1433;database=ducdd;user=ducdd@ducdd;password=quainhangw12a2@;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;"
  }

  model roles {
    ID          Int     @id @default(autoincrement())
    Name        String
    Description String?
    Users       users[]
  }

  model faculties {
    ID             Int      @id @default(autoincrement())
    Name           String
    Description    String
    IsEnabledGuest Boolean  @default(false)
    CreatedAt      DateTime @default(now())
    UpdatedAt      DateTime @default(now()) @updatedAt
    Events         events[]
    Users          users[]
  }

  model users {
    ID               Int             @id @default(autoincrement())
    Name             String
    Password         String
    Salt             String
    Email            String          @unique
    Phone            String?
    NewPhone         String?
    Address          String?
    CreatedAt        DateTime        @default(now())
    UpdatedAt        DateTime        @default(now()) @updatedAt
    Role             roles           @relation(fields: [RoleID], references: [ID], onDelete: Cascade, onUpdate: NoAction)
    RoleID           Int
    Faculty          faculties?      @relation(fields: [FacultyID], references: [ID], onDelete: NoAction, onUpdate: NoAction)
    FacultyID        Int?
    Comments         comments[]
    Contributions    contributions[]
    ResetPassword    String?         @db.VarChar(255)
    OTP              String?         @db.VarChar(64)
    OTPUsed          Boolean?        @default(false)
    OTPRequestedTime DateTime?
    OTPExpriedTime   DateTime?
    GoogleID         String?         @db.VarChar(255)
  }

  model events {
    ID                     Int                      @id @default(autoincrement())
    Name                   String
    Description            String
    ClosureDate            DateTime
    FinalDate              DateTime
    CreatedAt              DateTime                 @default(now())
    UpdatedAt              DateTime                 @default(now()) @updatedAt
    Faculty                faculties                @relation(fields: [FacultyID], references: [ID], onDelete: Cascade, onUpdate: NoAction)
    FacultyID              Int
    Contributions          contributions[]
    scheduledNotifications scheduledNotifications[]
  }

  model comments {
    ID             Int           @id @default(autoincrement())
    Content        String
    CreatedAt      DateTime      @default(now())
    UpdatedAt      DateTime      @default(now()) @updatedAt
    Contribution   contributions @relation(fields: [ContributionID], references: [ID], onDelete: Cascade, onUpdate: NoAction)
    ContributionID Int
    User           users         @relation(fields: [UserID], references: [ID], onDelete: NoAction, onUpdate: NoAction)
    UserID         Int
  }

  model files {
    ID             Int            @id @default(autoincrement())
    Url            String
    CreatedAt      DateTime?      @default(now())
    UpdatedAt      DateTime?      @default(now()) @updatedAt
    Contribution   contributions? @relation(fields: [ContributionID], references: [ID], onDelete: NoAction, onUpdate: NoAction)
    ContributionID Int
  }

  model contributions {
    ID           Int                  @id @default(autoincrement())
    Name         String
    Content      String
    IsPublic     Boolean              @default(false)
    IsApproved   Boolean              @default(false)
    CreatedAt    DateTime             @default(now())
    UpdatedAt    DateTime             @default(now()) @updatedAt
    Event        events               @relation(fields: [EventID], references: [ID], onDelete: Cascade, onUpdate: NoAction)
    EventID      Int
    User         users                @relation(fields: [UserID], references: [ID], onDelete: Cascade, onUpdate: NoAction)
    UserID       Int
    StatusID     Int
    LastEditByID Int?
    Files        files[]
    Status       contributionStatuses @relation(fields: [StatusID], references: [ID], onDelete: Cascade, onUpdate: NoAction)
    Comments     comments[]
  }

  model contributionStatuses {
    ID            Int             @id @default(autoincrement())
    Name          String
    Contributions contributions[]
  }

  model notificationSentTypes {
    ID           Int                      @id @default(autoincrement())
    Name         String
    Notification scheduledNotifications[]
  }

  model scheduledNotifications {
    ID                     Int                   @id @default(autoincrement())
    NotificationSentTypeID Int
    NotificationSentType   notificationSentTypes? @relation(fields: [NotificationSentTypeID], references: [ID], onDelete: Cascade, onUpdate: NoAction)
    EventID                Int?
    Event                  events?                @relation(fields: [EventID], references: [ID], onDelete: Cascade, onUpdate: NoAction)
    SentTo                 Int
    SentAt                 DateTime
    TransactionID          String?
    Acknowledged           Boolean?
    Status                 String?
    IsCancelled            Boolean               @default(false)
  }
