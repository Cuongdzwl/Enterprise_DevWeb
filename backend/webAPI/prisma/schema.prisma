generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("DATABASE_URL")
}

model roles {
  ID          Int     @id @default(autoincrement())
  Name        String
  Description String?
  Users       users[]
}

model faculties {
  ID             Int      @id @default(autoincrement())
  Name           String
  Description    String
  IsEnabledGuest Boolean  @default(false)
  CreatedAt      DateTime @default(now())
  UpdatedAt      DateTime @default(now()) @updatedAt
  Events         events[]
  Users           users[]
}

model users {
  ID                Int             @id @default(autoincrement())
  Name              String
  Password          String
  Salt              String
  Email             String          @unique
  Phone             String?
  Address           String?
  CreatedAt         DateTime        @default(now())
  UpdatedAt         DateTime        @default(now()) @updatedAt
  Role              roles           @relation(fields: [RoleID], references: [ID], onDelete: Cascade, onUpdate: NoAction)
  RoleID            Int
  Faculty           faculties?      @relation(fields: [FacultyID], references: [ID], onDelete: NoAction, onUpdate: NoAction)
  FacultyID         Int?
  Comments          comments[]
  Contributions     contributions[]
  ResetPassword     String?         @db.VarChar(255)
  OTP               String?         @db.VarChar(64)
  OTPUsed           Boolean?        @default(false)
  OTPRequestedTime  DateTime?
  OTPExpriedTime    DateTime?
}

model events {
  ID            Int             @id @default(autoincrement())
  Name          String
  Description   String
  ClosureDate   DateTime
  FinalDate     DateTime
  CreatedAt     DateTime        @default(now())
  UpdatedAt     DateTime        @default(now()) @updatedAt
  Faculty       faculties       @relation(fields: [FacultyID], references: [ID], onDelete: Cascade, onUpdate: NoAction)
  FacultyID     Int
  Contributions contributions[]
}

model comments {
  ID             Int           @id @default(autoincrement())
  Content        String
  CreatedAt      DateTime      @default(now())
  UpdatedAt      DateTime      @default(now()) @updatedAt
  Contribution   contributions @relation(fields: [ContributionID], references: [ID], onDelete: Cascade, onUpdate: NoAction)
  ContributionID Int
  User           users         @relation(fields: [UserID], references: [ID], onDelete: NoAction, onUpdate: NoAction)
  UserID         Int
}

model files {
  ID             Int            @id @default(autoincrement())
  Url            String
  CreatedAt      DateTime?      @default(now())
  UpdatedAt      DateTime?      @default(now()) @updatedAt
  Contribution   contributions? @relation(fields: [ContributionID], references: [ID], onDelete: NoAction, onUpdate: NoAction)
  ContributionID Int
}

model contributions {
  ID           Int                  @id @default(autoincrement())
  Name         String
  Content      String
  IsPublic     Boolean              @default(false)
  IsApproved   Boolean              @default(false)
  CreatedAt    DateTime             @default(now())
  UpdatedAt    DateTime             @default(now()) @updatedAt
  Event        events               @relation(fields: [EventID], references: [ID], onDelete: Cascade, onUpdate: NoAction)
  EventID      Int
  User         users                @relation(fields: [UserID], references: [ID], onDelete: Cascade, onUpdate: NoAction)
  UserID       Int
  StatusID     Int
  LastEditByID Int?
  Files        files[]
  Status       contributionStatuses @relation(fields: [StatusID], references: [ID], onDelete: Cascade, onUpdate: NoAction)
  Comments     comments[]
}

model contributionStatuses {
  ID            Int             @id @default(autoincrement())
  Name          String
  Contributions contributions[]
}

model notificationSentTypes {
  ID           Int             @id @default(autoincrement())
  Name         String
  Notification notifications[]
}

model notifications {
  ID                     Int                   @id @default(autoincrement())
  Content                String
  NotificationSentType   notificationSentTypes @relation(fields: [NotificationSentTypeID], references: [ID], onDelete: Cascade, onUpdate: NoAction)
  NotificationSentTypeID Int
  SentAt                 DateTime              @default(now())
  SentTo                 Int
  FromID                 Int
  FromTable              String
  IsCancelled            Boolean
}
